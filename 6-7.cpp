//創建Pizza物件並測試
#include<iostream>
#include<cstdlib>
#include<string>
using namespace std;

class Pizza {
public:
	const string DEEP_DISH;
	const string HAND_TOSSED;
	const string PAN;

	const string SMALL;
	const string MEDIUM;
	const string LARGE;

	Pizza(string type, string size, int toppings);		//存取private屬性成員的建構子
	Pizza();											//預設建構子

	//每個成員需要一對set和get
	string get_type() const{
		return type;
	}
	void set_type(string type) {
		this->type = type;
	}
	string get_size() const{
		return size;
	}
	void set_size(string size) {
		this->size = size;
	}
	int get_toppings() const{
		return toppings;
	}
	void set_toppings(int toppings) {
		this->toppings = toppings;
	}

	//印出pizza的資料
	void outputDescription() {											
		cout << "Pizza type: " << type << ", Size: " << size << ", Toppings: " << toppings << endl;
	}

	//計算價格		
	double computePrice() {												
		double base_price = 0.0;
		if (size == "SMALL") {
			base_price = 10.0;
		}
		else if (size == "MEDIUM") {
			base_price = 14.0;
		}
		else if (size == "LARGE") {
			base_price = 17.0;
		}
		return(base_price + toppings * 2);
	}					
	
private:
	string type;						//class成員包含種類,尺寸和配料個數
	string size;
	int toppings;
};


int main(void)
{
	Pizza pizza1("DEEP_DISH", "SMALL", 2);				//用建構子創建物件
	Pizza pizza2;

	pizza1.outputDescription();
	cout << "Price: " << pizza1.computePrice() << "$" << endl;
	
	pizza2.outputDescription();
	cout << "Price: " << pizza2.computePrice() << "$" << endl;

	system("pause");
	return 1;
}
//建構子
Pizza::Pizza(string type, string size, int toppings) {
	this->type = type;
	this->size = size;
	this->toppings = toppings;
}
//預設建構子
Pizza::Pizza() {
	this->type = "PAN";
	this->size = "LARGE";
	this->toppings = 2;
}














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































// Gay